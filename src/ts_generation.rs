use crate::Command;
use heck::CamelCase;
use std::{collections::BTreeSet, fmt::Write};
use yy_typings::object_yy::EventType;

#[derive(Debug)]
pub struct TsGenerated {
    pub event_enum: String,
    pub ev_to_fname: String,
    pub fname_to_ev: String,
}

impl std::fmt::Display for TsGenerated {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(
            f,
            "// AUTOGENERATED -- DO NOT EDIT\n\n{}\n\n{}\n\n{}",
            self.event_enum, self.ev_to_fname, self.fname_to_ev
        )
    }
}

impl TsGenerated {
    pub fn new(commands: &[Command]) -> Self {
        let list_of_events: BTreeSet<EventType> = commands.iter().map(|v| v.event).collect();
        let mut event_enum = String::new();
        let mut ev_to_fname = String::new();
        let mut fname_to_ev = String::new();

        writeln!(&mut event_enum, "export enum GmEvent {{").unwrap();
        writeln!(
            &mut ev_to_fname,
            "function ev_to_fname(gm_e: GmEvent): string {{\n\tswitch(gm_e) {{"
        )
        .unwrap();
        writeln!(
            &mut fname_to_ev,
            "function fname_to_ev(fname: string): GmEvent | undefined \
            {{\n\tswitch (fname) {{"
        )
        .unwrap();

        for event in list_of_events {
            let member_name = event.to_string().to_camel_case();
            writeln!(
                &mut ev_to_fname,
                "\t\tcase GmEvent.{}:\n\t\t\treturn '{}';",
                member_name,
                event.filename_simple()
            )
            .unwrap();

            writeln!(
                &mut fname_to_ev,
                "\t\tcase '{}':\n\t\t\treturn GmEvent.{};",
                event.filename_simple(),
                member_name
            )
            .unwrap();

            writeln!(&mut event_enum, "\t{0} = '{0}',", member_name).unwrap();
        }
        writeln!(&mut event_enum, "}}").unwrap();

        writeln!(&mut ev_to_fname, "\t}}").unwrap();
        writeln!(&mut ev_to_fname, "}}").unwrap();

        writeln!(&mut fname_to_ev, "\t\tdefault:\n\t\t\treturn undefined;").unwrap();
        writeln!(&mut fname_to_ev, "\t}}").unwrap();
        writeln!(&mut fname_to_ev, "}}").unwrap();

        Self {
            event_enum,
            ev_to_fname,
            fname_to_ev,
        }
    }
}
